***1***
for i in range(len(nums)):
            d=target-nums[i]
            for j in range(i+1,len(nums)):
                if nums[j]==d:
                    return [i,j]
*3224 ms*


***2***
carry=0
        cur=dummy=ListNode(0)
        while l1 and l2:
            cur.next=ListNode((l1.val+l2.val+carry)%10)
            carry=(l1.val+l2.val+carry)//10
            l1=l1.next
            l2=l2.next
            cur=cur.next
        if l1:
            while l1:
                cur.next=ListNode((l1.val+carry)%10)
                carry=(l1.val+carry)//10
                l1=l1.next
                cur=cur.next
            
        if l2:
            while l2:
                cur.next=ListNode((l2.val+carry)%10)
                carry=(l2.val+carry)//10
                l2=l2.next
                cur=cur.next
            
        if carry==1:
            cur.next=ListNode(1)
        return dummy.next
        
***5***
p=''
        for i in range(len(s)):
            len1=len(self.pa(s,i,i))
            if len1>len(p):
                p=self.pa(s,i,i)
            len2=len(self.pa(s,i,i+1))
            if len2>len(p):
                p=self.pa(s,i,i+1)
        return p
    def pa(self,s,l,r):
        while l>=0 and r<len(s) and s[l]==s[r]:
            l-=1
            r+=1
        return s[l+1:r]
        
        
***7***
if x ==0:
            return 0
        a=abs(x)
        nums=0
        while a!=0:
            temp=a%10
            nums= nums*10+temp
            a=int(a/10)
        if x>0 and nums<2147483647:
            return nums
        elif x<0 and nums<=2147483647:
            return -nums
        else:
            return 0
            
            
***9***
s=str(x)
        print(len(s))
        i=0
        j=len(s)-1
        while i<j:
            if s[i]!=s[j]:
                i+=1
                j-=1
                return False
            i+=1
            j-=1
        return True
        
   
***12***
number=[1000,900,500,400,100,90,50,40,10,9,5,4,1]
        roman=["M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"]
        result=''
        for i in range(0,len(number)):
            while num>=number[i]:
                num-=number[i]
                result+=roman[i]
        return result
        
        
***13***
d={"I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000}    
        result=0
        i=0
        while i < len(s):
            if i < len(s)-1 and d[s[i]]<d[s[i+1]]:
                result+=d[s[i+1]]-d[s[i]]
                i+=2
            else:
                result+=d[s[i]]
                i+=1
        return result
                
            
***14***
 if not strs:
            return ""
        for d in range(len(strs[0])):
            for s in strs[1:]:
                if d>=len(s) or strs[0][d]!=s[d]:
                    return strs[0][:d]
        return strs[0]
                

***15***
result=[]
        n=len(nums)
        nums.sort()
        for i in range(n-2):
            if nums[i]+nums[i+1]+nums[i+2]>0:
                break
            if nums[i]+nums[n-1]+nums[n-2]<0:
                continue
            if i>0 and nums[i]==nums[i-1]:
                continue
            l,r=i+1,n-1
            while l<r:
                temp=nums[i]+nums[l]+nums[r]
                if temp==0:
                    result.append([nums[i],nums[l],nums[r]])
                    while l+1<r and nums[l]==nums[l+1]:
                        l+=1
                    l+=1
                    while l<r-1 and nums[r]==nums[r-1]:
                        r-=1
                    r-=1
                elif temp<0:
                    l+=1
                elif temp>0:
                    r-=1
        return result
        

***16***
nums.sort()
        result=nums[0]+nums[1]+nums[len(nums)-1]
        for i in range(len(nums)-2):
            if i>0 and nums[i]==nums[i-1]:
                continue
            l,r=i+1,len(nums)-1
            while l<r:
                val=nums[i]+nums[l]+nums[r]
                if abs(val-target)<abs(result-target):
                    result=val
                if val==target:
                    return target
                elif val<target:
                    l+=1
                else:
                    r-=1
        return result
                

***17***
if len(digits)==0:
            return []
        maplist={2:"abc",3:"def",4:"ghi",5:"jkl",6:"mno",7:"pqrs",8:"tuv",9:"wxyz"}
        result=[""]
        for digit in digits:
            temp=[]
            for ch in maplist[int(digit)]:
                for s in result:
                    temp.append(s+ch)
            result=temp
        return result
                

***18***
if len(nums)<4:
            return []
        nums.sort()
        result=[]
        n=len(nums)
        for i in range(n-3):
            if i>0 and nums[i]==nums[i-1]:
                continue
            for j in range(i+1,n-2):
                if j>i+1 and nums[j]==nums[j-1]:
                    continue
                l=j+1
                r=n-1
                while l<r:
                    temp=nums[i]+nums[j]+nums[l]+nums[r]
                    if temp==target:
                        result.append([nums[i],nums[j],nums[l],nums[r]])
                        while l<r and nums[l]==nums[l+1]:
                            l+=1
                        while l<r and nums[r]==nums[r-1]:
                            r-=1
                        l+=1
                        r-=1
                    elif temp>target:
                        r-=1
                    else:
                        l+=1
        return result
        
        
***20***
d={")":"(","]":"[","}":"{"}
        stack=[]
        for ch in s:
            if ch in {"(","[","{"}:
                stack.append(ch)
            else:
                if len(stack)==0:
                    return False
                elif len(stack)>0 and stack[-1]==d[ch]:
                    stack.pop()
                else:
                    return False
        if len(stack)==0:
            return True
        else:
            return False
        
        
***21***
cur=dummy=ListNode(0)
        while l1 and l2:
            if l1.val<l2.val:
                cur.next=l1
                l1=l1.next
            else:
                cur.next=l2
                l2=l2.next
            cur=cur.next
        cur.next=l1 or l2
        return dummy.next
        
        
***26***
Tips:Two Points
if not nums:
            return 0
        c=0
        for i in range(len(nums)):
            if nums[i]!=nums[c]:
                c+=1
                nums[c]=nums[i]
        return c+1
                


***27***
Tips: Two points
c=0
        for i in range(len(nums)):
            if nums[i]!=val:
                nums[c]=nums[i]
                c+=1
        return c
                

***28***
for i in range(len(haystack)-len(needle)+1):
            if haystack[i:i+len(needle)]==needle:
                return i
        return -1






***167***
for i in range(len(numbers)):
            d=target-numbers[i]
            l,r=i+1,len(numbers)-1
            while l<=r:
                mid=(l+r)//2
                if numbers[mid]==d:
                    return [i+1,mid+1]
                elif numbers[mid]>d:
                    r=mid-1
                else:
                    l=mid+1
 *68 ms*

