***1***
for i in range(len(nums)):
            d=target-nums[i]
            for j in range(i+1,len(nums)):
                if nums[j]==d:
                    return [i,j]
*3224 ms*


***7***
if x ==0:
            return 0
        a=abs(x)
        nums=0
        while a!=0:
            temp=a%10
            nums= nums*10+temp
            a=int(a/10)
        if x>0 and nums<2147483647:
            return nums
        elif x<0 and nums<=2147483647:
            return -nums
        else:
            return 0
            
            
***9***
s=str(x)
        print(len(s))
        i=0
        j=len(s)-1
        while i<j:
            if s[i]!=s[j]:
                i+=1
                j-=1
                return False
            i+=1
            j-=1
        return True
        
   
***13***
d={"I":1,"V":5,"X":10,"L":50,"C":100,"D":500,"M":1000}    
        result=0
        i=0
        while i < len(s):
            if i < len(s)-1 and d[s[i]]<d[s[i+1]]:
                result+=d[s[i+1]]-d[s[i]]
                i+=2
            else:
                result+=d[s[i]]
                i+=1
        return result
                
            
***14***
 if not strs:
            return ""
        for d in range(len(strs[0])):
            for s in strs[1:]:
                if d>=len(s) or strs[0][d]!=s[d]:
                    return strs[0][:d]
        return strs[0]
                

***26***
Tips:Two Points
if not nums:
            return 0
        c=0
        for i in range(len(nums)):
            if nums[i]!=nums[c]:
                c+=1
                nums[c]=nums[i]
        return c+1
                


***27***
Tips: Two points
c=0
        for i in range(len(nums)):
            if nums[i]!=val:
                nums[c]=nums[i]
                c+=1
        return c
                

***28***
for i in range(len(haystack)-len(needle)+1):
            if haystack[i:i+len(needle)]==needle:
                return i
        return -1






***167***
for i in range(len(numbers)):
            d=target-numbers[i]
            l,r=i+1,len(numbers)-1
            while l<=r:
                mid=(l+r)//2
                if numbers[mid]==d:
                    return [i+1,mid+1]
                elif numbers[mid]>d:
                    r=mid-1
                else:
                    l=mid+1
 *68 ms*

