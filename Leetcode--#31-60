***31***
n=len(nums)
        i=n-1
        while i>0 and nums[i]<=nums[i-1]:
            i-=1
        self.reverse(nums,i,n-1)
        if i > 0:
            for j in range(i, n):
                if nums[j] > nums[i-1]:
                    nums[i-1], nums[j] = nums[j], nums[i-1]
                    break

    
    def reverse(self,nums,i,j):
        for k in range(i,(j+i)//2+1):
            nums[k],nums[i+j-k]=nums[i+j-k],nums[k]

***33***
if len(nums)==0:
            return -1
        l=0
        r=len(nums)-1
        while l+1<r:
            m=(r-l)//2+l
            if nums[m]==target:
                return m
            if nums[m]>nums[l]:
                if target>=nums[l] and nums[m]>=target:
                    r=m
                else:
                    l=m
            else:
                if target<=nums[r] and nums[m]<=target:
                    l=m
                else:
                    r=m
        if nums[l]==target:
            return l
        if nums[r]==target:
            return r       
        return -1
        

***34***
if len(nums)==0:
            return [-1,-1]
        if len(nums)==1:
            if nums[0]==target:
                return [0,0]
            else:
                return [-1,-1]
        l=0
        r=len(nums)-1
        
        while l<=r:
            m=(r-l)//2+l
            
            if nums[m]==target:
                if m<len(nums)-1:
                    i=m
                    j=m
                    while i>=0 and nums[i]==target:
                        i-=1
                    while j<=len(nums)-1 and nums[j]==target:
                        j+=1
                    return [i+1,j-1]
                elif m==len(nums)-1:
                    i=m-1
                    while i>=0 and nums[i]==target:
                        i-=1
                    return [i+1,m]
            elif nums[m]>target:
                r=m-1
            else:
                l=m+1
        return [-1,-1]
        
        
***35***
l,r=0,len(nums)-1
        while l<=r:
            m=l+(r-l)//2
            if nums[m]==target:
                return m
            elif nums[m]>target:
                r=m-1
            elif nums[m]<target:
                l=m+1
        return l
        

 if target>nums[len(nums)-1]:
            return len(nums)
        for i in range(len(nums)):
            if nums[i]>=target:
                return i


stack=[]
        if nums[0]>target:
            return 0
        if nums[-1]<target:
            return len(nums)
        for i in range(len(nums)):
            if nums[i]<target:
                stack.append(i)
            elif nums[i]==target:
                return i
            else:
                return stack.pop()+1


***36***
 n=len(board)
        return self.row() and self.colunm()and self.cell()
    
    def row(self.board):
        row=[]
        for r in range(n):
            for c in board[r]:
                if c!=".":
                    row.append(c)
            if len(set(row))!=len(row):
                return False
        return True
    
    def colunm(self,board):
        colunm=[]
        for c in range(len(board[0])):
            for r in range(len(board)):
                if board[r][c]!=".":
                    colunm.append(board[r][c])
            if len(set(colunm))!=len(colunm):
                return False
        return True
    
    def cell(self.board):
        cell=[]
        r=0
        c=0
        while r<=len(board[0]) and c<=len(board):
            
            for row in range(r,r+3):
                for colunm in range(c,c+3):
                                   
                    if board[row][colunm]!=".":
                        cell.append(board[row][colunm])
            
            if len(set(cell))!=9:
                return False
            return True
            
    
***38***
seq="1"
        for i in range(n-1):
            seq=self.f(seq)
        return seq
    def f(self,seq):
        j=0
        seq1=""
        while j < len(seq):
            
            c=1
            while j < len(seq)-1 and seq[j]==seq[j+1]:
                c+=1
                j+=1
            seq1+=str(c)+seq[j]
            j+=1
        return seq1
        

***43***
if len(num1)==0 or len(num2)==0:
            return "0"        
        q=0
        f=0
        for i in range(len(num1)-1,-1,-1):
            p=0
            result=0
            for j in range(len(num2)-1,-1,-1):
                temp=int(num2[j])*int(num1[i])               
                result+=temp*10**p
                p+=1                
            f+=result*10**q
            q+=1
        return str(f)
        
        
***46***
if len(nums)<=1:
            return [nums]
        
        result=[]
        for i,num in enumerate(nums):
            n=nums[:i]+nums[i+1:]
            for j in self.permute(n):
                result.append([num]+j)
        return result
    

***48***
 n=len(matrix)-1
        up=0
        down=len(matrix)-1
        left=0
        right=len(matrix)-1
        m=len(matrix)
        while up<=n//2 and left<=n//2:
            for i in range(m):
                
                matrix[down-i][right],matrix[up][left+i]=matrix[up][left+i],matrix[down-i][right]
            up+=1
            right-=1
            print(matrix)
            
            for j in range(m-1):
                matrix[down][right-j],matrix[up+j][left]=matrix[up+j][left],matrix[down][right-j]
            down-=1
            left+=1
            m-=2
        
        for l in range(n//2+1):
            matrix[l],matrix[n-l]=matrix[n-l],matrix[l]
        return matrix
        
        
***49***
result={}
        l=[]
        for item in strs:
            k="".join(sorted(item))            
            if k not in result:
                result[k]=[]
            result[k].append(item)
        for x in result:
            l.append(result[x])
        return l
        
        
***54***
if len(matrix)==0:
            return []
        result=[]
        rowBegin=0
        rowEnd=len(matrix)-1
        columnBegin=0
        columnEnd=len(matrix[0])-1
        while rowBegin<=rowEnd and columnBegin<=columnEnd:
            for i in range(columnBegin,columnEnd+1,1):
                result.append(matrix[rowBegin][i])
            rowBegin+=1
        
            for j in range(rowBegin,rowEnd+1,1):
                result.append(matrix[j][columnEnd])
            columnEnd-=1
            
            if rowBegin<=rowEnd:
                for i in range(columnEnd,columnBegin-1,-1):
                    result.append(matrix[rowEnd][i])
            rowEnd-=1
            
            if columnBegin<=columnEnd:
                for j in range(rowEnd,rowBegin-1,-1):
                    result.append(matrix[j][columnBegin])
            columnBegin+=1
        return result
 
 
***55***
current=len(nums)-1
        for i in range(current-1,-1,-1):
            if nums[i] + i>=current:
                current=i
        if current==0:
            return True
        else:
            return False
    
    
***56***
if len(intervals)==0:
            return []
        result=[]
        intervals.sort(key=lambda x: x[0])
        print (intervals)
        current=intervals[0]
        result.append(intervals[0])
        j=0
        for i in range(1,len(intervals)):
            if intervals[i][0]>result[-1][-1]:
                       result.append(intervals[i])
            else:
                       result[-1][-1]=max(result[-1][-1],intervals[i][-1])
        return result
        
        
***58***
if not s:
            return 0
        if not s.split():
            return 0
        else:
            x=s.split()            
            print(x)
            a=x[-1]
            return len(a)
            

***59***
result = [[0 for x in range(n)] for y in range(n)]
        print(result)
        
        rowStart=0
        rowEnd=n-1
        colunmStart=0
        colunmEnd=n-1
        i=1
        while rowStart<=rowEnd and colunmStart<=colunmEnd:
            for c in range(colunmStart,colunmEnd+1):
                result[rowStart][c]=i
                i+=1
            rowStart+=1
            
            for r in range(rowStart,rowEnd+1):
                result[r][colunmEnd]=i
                i+=1
            colunmEnd-=1
            
            for c in range(colunmEnd,colunmStart-1,-1):
                result[rowEnd][c]=i
                i+=1
            rowEnd-=1
            
            for r in range(rowEnd,rowStart-1,-1):
                result[r][colunmStart]=i
                i+=1
            colunmStart+=1
        return result
        
        
            
