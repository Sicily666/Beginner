***101***
if root is None:
            return True
        return self.isSymmetricRec(root.left,root.right)
    def isSymmetricRec(self,left,right):
        if left is None and right is None:
            return True
        if left is None or right is None or left.val!=right.val:
            return False
        return self.isSymmetricRec(left.left,right.right) and self.isSymmetricRec(left.right,right.left)


***104***
 if root is None:
            return 0
        else:
            return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
            

***107***
if root is None:
            return []
        result=[]
        current=[root]
        while current:
            next_l=[]
            val=[]
            for node in current:
                val.append(node.val)
                if node.left:
                    next_l.append(node.left)
                if node.right:
                    next_l.append(node.right)
            current=next_l
            result.append(val)
        return result[::-1]
        


***108***
def f(nums,start,end):
            if start>end:
                return None
            mid=(start+end)//2
            node=TreeNode(nums[mid])
            node.left=f(nums,start,mid-1)
            node.right=f(nums,mid+1,end)
            return node
        return f(nums,0,len(nums)-1)
        
        
        
***110***
 def f(root):
            if root is None:
                return 0
            left_height,right_height=f(root.left),f(root.right)
            if left_height<0 or right_height<0 or abs(left_height-right_height)>1:
                return -1
            else:
                return max(right_height,left_height)+1
        return f(root)>=0
        
        
***111***
if root==None:
            return 0
        if root.left and root.right:
            return min(self.minDepth(root.left),self.minDepth(root.right))+1
        else:
            return max(self.minDepth(root.left),self.minDepth(root.right))+1
            
        
***112***
if root is None:
            return False
        if root.left==None and root.right==None and root.val==sum:
            return True
        else:
            return self.hasPathSum(root.left,sum-root.val) or self.hasPathSum(root.right,sum-root.val)
