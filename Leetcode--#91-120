***101***
if root is None:
            return True
        return self.isSymmetricRec(root.left,root.right)
    def isSymmetricRec(self,left,right):
        if left is None and right is None:
            return True
        if left is None or right is None or left.val!=right.val:
            return False
        return self.isSymmetricRec(left.left,right.right) and self.isSymmetricRec(left.right,right.left)


***104***
 if root is None:
            return 0
        else:
            return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
            
            
***111***
if root==None:
            return 0
        if root.left and root.right:
            return min(self.minDepth(root.left),self.minDepth(root.right))+1
        else:
            return max(self.minDepth(root.left),self.minDepth(root.right))+1
            
        
***112***
if root is None:
            return False
        if root.left==None and root.right==None and root.val==sum:
            return True
        else:
            return self.hasPathSum(root.left,sum-root.val) or self.hasPathSum(root.right,sum-root.val)
